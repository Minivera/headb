//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TransactionalDocuments = newTransactionalDocumentsTable("public", "transactional_documents", "")

type transactionalDocumentsTable struct {
	postgres.Table

	//Columns
	ID            postgres.ColumnString
	Content       postgres.ColumnString
	CollectionID  postgres.ColumnString
	TransactionID postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionalDocumentsTable struct {
	transactionalDocumentsTable

	EXCLUDED transactionalDocumentsTable
}

// AS creates new TransactionalDocumentsTable with assigned alias
func (a TransactionalDocumentsTable) AS(alias string) *TransactionalDocumentsTable {
	return newTransactionalDocumentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionalDocumentsTable with assigned schema name
func (a TransactionalDocumentsTable) FromSchema(schemaName string) *TransactionalDocumentsTable {
	return newTransactionalDocumentsTable(schemaName, a.TableName(), a.Alias())
}

func newTransactionalDocumentsTable(schemaName, tableName, alias string) *TransactionalDocumentsTable {
	return &TransactionalDocumentsTable{
		transactionalDocumentsTable: newTransactionalDocumentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newTransactionalDocumentsTableImpl("", "excluded", ""),
	}
}

func newTransactionalDocumentsTableImpl(schemaName, tableName, alias string) transactionalDocumentsTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		ContentColumn       = postgres.StringColumn("content")
		CollectionIDColumn  = postgres.StringColumn("collection_id")
		TransactionIDColumn = postgres.StringColumn("transaction_id")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, ContentColumn, CollectionIDColumn, TransactionIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{ContentColumn, CollectionIDColumn, TransactionIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return transactionalDocumentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Content:       ContentColumn,
		CollectionID:  CollectionIDColumn,
		TransactionID: TransactionIDColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
